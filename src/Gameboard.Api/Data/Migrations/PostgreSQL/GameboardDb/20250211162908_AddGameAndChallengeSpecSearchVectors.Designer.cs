// <auto-generated />
using System;
using Gameboard.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb
{
    [DbContext(typeof(GameboardDbContextPostgreSQL))]
    [Migration("20250211162908_AddGameAndChallengeSpecSearchVectors")]
    partial class AddGameAndChallengeSpecSearchVectors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameGameExportBatch", b =>
                {
                    b.Property<string>("ExportedInBatchesId")
                        .HasColumnType("text");

                    b.Property<string>("IncludedGamesId")
                        .HasColumnType("character varying(40)");

                    b.HasKey("ExportedInBatchesId", "IncludedGamesId");

                    b.HasIndex("IncludedGamesId");

                    b.ToTable("GameGameExportBatch");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ApiKey", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTimeOffset>("GeneratedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ArchivedChallenge", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Events")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("GameName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("HasGamespaceDeployed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastScoreTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastSyncTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PlayerId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("PlayerMode")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Submissions")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("TeamMembers")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("ArchivedChallenges");
                });

            modelBuilder.Entity("Gameboard.Api.Data.AwardedChallengeBonus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ChallengeBonusId")
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ChallengeId")
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("EnteredOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("InternalSummary")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeBonusId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("AwardedChallengeBonuses");
                });

            modelBuilder.Entity("Gameboard.Api.Data.CertificateTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("CertificateTemplate");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Challenge", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("GameEngineType")
                        .HasColumnType("integer");

                    b.Property<string>("GameId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("GraderKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("HasDeployedGamespace")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastScoreTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastSyncTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PendingSubmission")
                        .HasColumnType("text");

                    b.Property<string>("PlayerId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("PlayerMode")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<string>("SpecId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeBonus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("ChallengeBonusType")
                        .HasColumnType("integer");

                    b.Property<string>("ChallengeSpecId")
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double>("PointValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeSpecId");

                    b.ToTable("ChallengeBonuses");

                    b.HasDiscriminator<int>("ChallengeBonusType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ChallengeId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("TeamId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Text")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeEvents");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeGate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("GameId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("RequiredId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<double>("RequiredScore")
                        .HasColumnType("double precision");

                    b.Property<string>("TargetId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("ChallengeGates");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeSpec", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("AverageDeploySeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("GameEngineType")
                        .HasColumnType("integer");

                    b.Property<string>("GameId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<float>("R")
                        .HasColumnType("real");

                    b.Property<bool>("ShowSolutionGuideInCompetitiveMode")
                        .HasColumnType("boolean");

                    b.Property<string>("SolutionGuideUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("TextSearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description", "GameId", "Tag", "Tags", "Text" });

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TextSearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TextSearchVector"), "GIN");

                    b.ToTable("ChallengeSpecs");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeSubmission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChallengeId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<double>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<DateTimeOffset>("SubmittedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeSubmissions");
                });

            modelBuilder.Entity("Gameboard.Api.Data.DenormalizedTeamScore", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<double>("CumulativeTimeMs")
                        .HasColumnType("double precision");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<double?>("ScoreAdvanced")
                        .HasColumnType("double precision");

                    b.Property<double>("ScoreAutoBonus")
                        .HasColumnType("double precision");

                    b.Property<double>("ScoreChallenge")
                        .HasColumnType("double precision");

                    b.Property<double>("ScoreManualBonus")
                        .HasColumnType("double precision");

                    b.Property<double>("ScoreOverall")
                        .HasColumnType("double precision");

                    b.Property<int>("SolveCountComplete")
                        .HasColumnType("integer");

                    b.Property<int>("SolveCountNone")
                        .HasColumnType("integer");

                    b.Property<int>("SolveCountPartial")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("DenormalizedTeamScores");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Extension", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("HostUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Type");

                    b.ToTable("Extensions");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ExternalGameHost", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ClientUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("DestroyResourcesOnDeployFailure")
                        .HasColumnType("boolean");

                    b.Property<int?>("GamespaceDeployBatchSize")
                        .HasColumnType("integer");

                    b.Property<string>("HostApiKey")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("HostUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("HttpTimeoutInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PingEndpoint")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StartupEndpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TeamExtendedEndpoint")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ExternalGameHosts");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ExternalGameTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("DeployStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalGameUrl")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasAlternateKey("TeamId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("ExternalGameTeams");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Answers")
                        .HasColumnType("text");

                    b.Property<string>("ChallengeId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ChallengeSpecId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("GameId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PlayerId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("Submitted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ChallengeSpecId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackSubmission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AttachedEntityType")
                        .HasColumnType("integer");

                    b.Property<string>("FeedbackTemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("WhenEdited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("WhenFinalized")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackSubmissions");

                    b.HasDiscriminator<int>("AttachedEntityType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("HelpText")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("FeedbackTemplates");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Game", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("AllowLateStart")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPreview")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPublicScoreboardAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Background")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CardText1")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CardText2")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CardText3")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CertificateTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("ChallengesFeedbackTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Competition")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Division")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ExternalHostId")
                        .HasColumnType("character varying(40)");

                    b.Property<string>("FeedbackConfig")
                        .HasColumnType("text");

                    b.Property<string>("FeedbackTemplateId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("GameEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GameMarkdown")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("GameStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GamespaceLimitPerSession")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer");

                    b.Property<int>("MinTeamSize")
                        .HasColumnType("integer");

                    b.Property<string>("Mode")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("PlayerMode")
                        .HasColumnType("integer");

                    b.Property<string>("PracticeCertificateTemplateId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RegistrationClose")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegistrationConstraint")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationMarkdown")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RegistrationOpen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireSponsoredTeam")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireSynchronizedStart")
                        .HasColumnType("boolean");

                    b.Property<string>("Season")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("SessionAvailabilityWarningThreshold")
                        .HasColumnType("integer");

                    b.Property<int>("SessionLimit")
                        .HasColumnType("integer");

                    b.Property<int>("SessionMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowOnHomePageInPracticeMode")
                        .HasColumnType("boolean");

                    b.Property<string>("Sponsor")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<NpgsqlTsVector>("TextSearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Competition", "Id", "Track", "Season", "Division" });

                    b.Property<string>("Track")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTemplateId");

                    b.HasIndex("ChallengesFeedbackTemplateId");

                    b.HasIndex("ExternalHostId");

                    b.HasIndex("FeedbackTemplateId");

                    b.HasIndex("PracticeCertificateTemplateId");

                    b.HasIndex("TextSearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TextSearchVector"), "GIN");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Gameboard.Api.Data.GameExportBatch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ExportedByUserId")
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("ExportedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExportedByUserId");

                    b.ToTable("GameExportBatches", (string)null);
                });

            modelBuilder.Entity("Gameboard.Api.Data.ManualBonus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EnteredByUserId")
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("EnteredOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double>("PointValue")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnteredByUserId");

                    b.ToTable("ManualBonuses");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Gameboard.Api.Data.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("Advanced")
                        .HasColumnType("boolean");

                    b.Property<string>("AdvancedFromGameId")
                        .HasColumnType("character varying(40)");

                    b.Property<string>("AdvancedFromPlayerId")
                        .HasColumnType("character varying(40)");

                    b.Property<string>("AdvancedFromTeamId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<double?>("AdvancedWithScore")
                        .HasColumnType("double precision");

                    b.Property<string>("ApprovedName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("CorrectCount")
                        .HasColumnType("integer");

                    b.Property<string>("GameId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsLateStart")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReady")
                        .HasColumnType("boolean");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("NameStatus")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("PartialCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SessionBegin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SessionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("SessionMinutes")
                        .HasColumnType("double precision");

                    b.Property<string>("SponsorId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("TeamId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedFromGameId");

                    b.HasIndex("AdvancedFromPlayerId");

                    b.HasIndex("GameId");

                    b.HasIndex("SponsorId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "TeamId");

                    b.HasIndex("UserId", "TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Gameboard.Api.Data.PracticeModeSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("AttemptLimit")
                        .HasColumnType("integer");

                    b.Property<string>("CertificateTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("DefaultPracticeSessionLengthMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("IntroTextMarkdown")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int?>("MaxConcurrentPracticeSessions")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxPracticeSessionLengthMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestedSearches")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTemplateId")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId")
                        .IsUnique();

                    b.ToTable("PracticeModeSettings");
                });

            modelBuilder.Entity("Gameboard.Api.Data.PublishedCertificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("PublishedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PublishedCertificate");

                    b.HasDiscriminator<int>("Mode");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Gameboard.Api.Data.Sponsor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ParentSponsorId")
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ParentSponsorId");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SupportSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("SupportPageGreeting")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedByUserId")
                        .IsUnique();

                    b.ToTable("SupportSettings");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SupportSettingsAutoTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ConditionType")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionValue")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("SupportSettingsId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("SupportSettingsId");

                    b.ToTable("SupportSettingsAutoTags");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SystemNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset?>("EndsOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDismissible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("MarkdownContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartsOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SystemNotificationInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DismissedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SawCalloutOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SawFullNotificationOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SystemNotificationId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasAlternateKey("SystemNotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemNotificationInteractions");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Ticket", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("AssigneeId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Attachments")
                        .HasColumnType("text");

                    b.Property<string>("ChallengeId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Key"));

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlayerId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("RequesterId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("StaffCreated")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TeamId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Gameboard.Api.Data.TicketActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssigneeId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Attachments")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TicketId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketActivity");
                });

            modelBuilder.Entity("Gameboard.Api.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ApprovedName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("HasDefaultSponsor")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoginCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("NameStatus")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("PlayAudioOnBrowserNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SponsorId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeBonusCompleteSolveRank", b =>
                {
                    b.HasBaseType("Gameboard.Api.Data.ChallengeBonus");

                    b.Property<int>("SolveRank")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackSubmissionChallengeSpec", b =>
                {
                    b.HasBaseType("Gameboard.Api.Data.FeedbackSubmission");

                    b.Property<string>("ChallengeSpecId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.HasIndex("ChallengeSpecId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackSubmissionGame", b =>
                {
                    b.HasBaseType("Gameboard.Api.Data.FeedbackSubmission");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.HasIndex("GameId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Gameboard.Api.Data.ManualChallengeBonus", b =>
                {
                    b.HasBaseType("Gameboard.Api.Data.ManualBonus");

                    b.Property<string>("ChallengeId")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.HasIndex("ChallengeId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Gameboard.Api.Data.ManualTeamBonus", b =>
                {
                    b.HasBaseType("Gameboard.Api.Data.ManualBonus");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Gameboard.Api.Data.PublishedCompetitiveCertificate", b =>
                {
                    b.HasBaseType("Gameboard.Api.Data.PublishedCertificate");

                    b.Property<string>("GameId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerUserId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Gameboard.Api.Data.PublishedPracticeCertificate", b =>
                {
                    b.HasBaseType("Gameboard.Api.Data.PublishedCertificate");

                    b.Property<string>("ChallengeSpecId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasIndex("ChallengeSpecId");

                    b.HasIndex("OwnerUserId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("GameGameExportBatch", b =>
                {
                    b.HasOne("Gameboard.Api.Data.GameExportBatch", null)
                        .WithMany()
                        .HasForeignKey("ExportedInBatchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gameboard.Api.Data.Game", null)
                        .WithMany()
                        .HasForeignKey("IncludedGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gameboard.Api.Data.ApiKey", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "Owner")
                        .WithMany("ApiKeys")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Gameboard.Api.Data.AwardedChallengeBonus", b =>
                {
                    b.HasOne("Gameboard.Api.Data.ChallengeBonus", "ChallengeBonus")
                        .WithMany("AwardedTo")
                        .HasForeignKey("ChallengeBonusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gameboard.Api.Data.Challenge", "Challenge")
                        .WithMany("AwardedBonuses")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Challenge");

                    b.Navigation("ChallengeBonus");
                });

            modelBuilder.Entity("Gameboard.Api.Data.CertificateTemplate", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "CreatedByUser")
                        .WithMany("CreatedCertificateTemplates")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Challenge", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("Challenges")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.Player", "Player")
                        .WithMany("Challenges")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeBonus", b =>
                {
                    b.HasOne("Gameboard.Api.Data.ChallengeSpec", "ChallengeSpec")
                        .WithMany("Bonuses")
                        .HasForeignKey("ChallengeSpecId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChallengeSpec");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeEvent", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Challenge", "Challenge")
                        .WithMany("Events")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeGate", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("Prerequisites")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeSpec", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("Specs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeSubmission", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Challenge", "Challenge")
                        .WithMany("Submissions")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("Gameboard.Api.Data.DenormalizedTeamScore", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("DenormalizedTeamScores")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ExternalGameTeam", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("ExternalGameTeams")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Feedback", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Challenge", "Challenge")
                        .WithMany("Feedback")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gameboard.Api.Data.ChallengeSpec", "ChallengeSpec")
                        .WithMany("Feedback")
                        .HasForeignKey("ChallengeSpecId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("Feedback")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gameboard.Api.Data.Player", "Player")
                        .WithMany("Feedback")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gameboard.Api.Data.User", "User")
                        .WithMany("Feedback")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Challenge");

                    b.Navigation("ChallengeSpec");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackSubmission", b =>
                {
                    b.HasOne("Gameboard.Api.Data.FeedbackTemplate", "FeedbackTemplate")
                        .WithMany("Submissions")
                        .HasForeignKey("FeedbackTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gameboard.Api.Data.User", "User")
                        .WithMany("FeedbackSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Gameboard.Api.Features.Feedback.QuestionSubmission", "Responses", b1 =>
                        {
                            b1.Property<string>("FeedbackSubmissionId")
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<string>("Answer")
                                .HasColumnType("text");

                            b1.Property<string>("Prompt")
                                .HasColumnType("text");

                            b1.Property<string>("ShortName")
                                .HasColumnType("text");

                            b1.HasKey("FeedbackSubmissionId", "Id");

                            b1.ToTable("FeedbackSubmissionResponses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("FeedbackSubmissionId");
                        });

                    b.Navigation("FeedbackTemplate");

                    b.Navigation("Responses");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackTemplate", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "CreatedByUser")
                        .WithMany("CreatedFeedbackTemplates")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Game", b =>
                {
                    b.HasOne("Gameboard.Api.Data.CertificateTemplate", "CertificateTemplate")
                        .WithMany("UseAsTemplateForGames")
                        .HasForeignKey("CertificateTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.FeedbackTemplate", "ChallengesFeedbackTemplate")
                        .WithMany("UseAsFeedbackTemplateForGames")
                        .HasForeignKey("ChallengesFeedbackTemplateId");

                    b.HasOne("Gameboard.Api.Data.ExternalGameHost", "ExternalHost")
                        .WithMany("UsedByGames")
                        .HasForeignKey("ExternalHostId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.FeedbackTemplate", "FeedbackTemplate")
                        .WithMany("UseAsFeedbackTemplateForGameChallenges")
                        .HasForeignKey("FeedbackTemplateId");

                    b.HasOne("Gameboard.Api.Data.CertificateTemplate", "PracticeCertificateTemplate")
                        .WithMany("UseAsPracticeTemplateForGames")
                        .HasForeignKey("PracticeCertificateTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CertificateTemplate");

                    b.Navigation("ChallengesFeedbackTemplate");

                    b.Navigation("ExternalHost");

                    b.Navigation("FeedbackTemplate");

                    b.Navigation("PracticeCertificateTemplate");
                });

            modelBuilder.Entity("Gameboard.Api.Data.GameExportBatch", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "ExportedByUser")
                        .WithMany("GameExportBatches")
                        .HasForeignKey("ExportedByUserId");

                    b.Navigation("ExportedByUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ManualBonus", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "EnteredByUser")
                        .WithMany("EnteredManualBonuses")
                        .HasForeignKey("EnteredByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EnteredByUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Player", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "AdvancedFromGame")
                        .WithMany("AdvancedPlayers")
                        .HasForeignKey("AdvancedFromGameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.Player", "AdvancedFromPlayer")
                        .WithMany("AdvancedToPlayers")
                        .HasForeignKey("AdvancedFromPlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId");

                    b.HasOne("Gameboard.Api.Data.Sponsor", "Sponsor")
                        .WithMany("SponsoredPlayers")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gameboard.Api.Data.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AdvancedFromGame");

                    b.Navigation("AdvancedFromPlayer");

                    b.Navigation("Game");

                    b.Navigation("Sponsor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gameboard.Api.Data.PracticeModeSettings", b =>
                {
                    b.HasOne("Gameboard.Api.Data.CertificateTemplate", "CertificateTemplate")
                        .WithOne("UsedAsPracticeModeDefault")
                        .HasForeignKey("Gameboard.Api.Data.PracticeModeSettings", "CertificateTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.User", "UpdatedByUser")
                        .WithOne("UpdatedPracticeModeSettings")
                        .HasForeignKey("Gameboard.Api.Data.PracticeModeSettings", "UpdatedByUserId");

                    b.Navigation("CertificateTemplate");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Sponsor", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Sponsor", "ParentSponsor")
                        .WithMany("ChildSponsors")
                        .HasForeignKey("ParentSponsorId");

                    b.Navigation("ParentSponsor");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SupportSettings", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "UpdatedByUser")
                        .WithOne("UpdatedSupportSettings")
                        .HasForeignKey("Gameboard.Api.Data.SupportSettings", "UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SupportSettingsAutoTag", b =>
                {
                    b.HasOne("Gameboard.Api.Data.SupportSettings", "SupportSettings")
                        .WithMany("AutoTags")
                        .HasForeignKey("SupportSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportSettings");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SystemNotification", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "CreatedByUser")
                        .WithMany("CreatedSystemNotifications")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SystemNotificationInteraction", b =>
                {
                    b.HasOne("Gameboard.Api.Data.SystemNotification", "SystemNotification")
                        .WithMany("Interactions")
                        .HasForeignKey("SystemNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gameboard.Api.Data.User", "User")
                        .WithMany("SystemNotificationInteractions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemNotification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Ticket", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Gameboard.Api.Data.Challenge", "Challenge")
                        .WithMany("Tickets")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Gameboard.Api.Data.Player", "Player")
                        .WithMany("Tickets")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gameboard.Api.Data.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId");

                    b.Navigation("Assignee");

                    b.Navigation("Challenge");

                    b.Navigation("Creator");

                    b.Navigation("Player");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Gameboard.Api.Data.TicketActivity", b =>
                {
                    b.HasOne("Gameboard.Api.Data.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Gameboard.Api.Data.Ticket", "Ticket")
                        .WithMany("Activity")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gameboard.Api.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Assignee");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gameboard.Api.Data.User", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Sponsor", "Sponsor")
                        .WithMany("SponsoredUsers")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackSubmissionChallengeSpec", b =>
                {
                    b.HasOne("Gameboard.Api.Data.ChallengeSpec", "ChallengeSpec")
                        .WithMany("FeedbackSubmissions")
                        .HasForeignKey("ChallengeSpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeSpec");
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackSubmissionGame", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("FeedbackSubmissions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ManualChallengeBonus", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Challenge", "Challenge")
                        .WithMany("AwardedManualBonuses")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("Gameboard.Api.Data.PublishedCompetitiveCertificate", b =>
                {
                    b.HasOne("Gameboard.Api.Data.Game", "Game")
                        .WithMany("PublishedCompetitiveCertificates")
                        .HasForeignKey("GameId");

                    b.HasOne("Gameboard.Api.Data.User", "OwnerUser")
                        .WithMany("PublishedCompetitiveCertificates")
                        .HasForeignKey("OwnerUserId")
                        .HasConstraintName("FK_OwnerUserId_Users_Id");

                    b.Navigation("Game");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.PublishedPracticeCertificate", b =>
                {
                    b.HasOne("Gameboard.Api.Data.ChallengeSpec", "ChallengeSpec")
                        .WithMany("PublishedPracticeCertificates")
                        .HasForeignKey("ChallengeSpecId");

                    b.HasOne("Gameboard.Api.Data.User", "OwnerUser")
                        .WithMany("PublishedPracticeCertificates")
                        .HasForeignKey("OwnerUserId")
                        .HasConstraintName("FK_OwnerUserId_Users_Id");

                    b.Navigation("ChallengeSpec");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Gameboard.Api.Data.CertificateTemplate", b =>
                {
                    b.Navigation("UseAsPracticeTemplateForGames");

                    b.Navigation("UseAsTemplateForGames");

                    b.Navigation("UsedAsPracticeModeDefault");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Challenge", b =>
                {
                    b.Navigation("AwardedBonuses");

                    b.Navigation("AwardedManualBonuses");

                    b.Navigation("Events");

                    b.Navigation("Feedback");

                    b.Navigation("Submissions");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeBonus", b =>
                {
                    b.Navigation("AwardedTo");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ChallengeSpec", b =>
                {
                    b.Navigation("Bonuses");

                    b.Navigation("Feedback");

                    b.Navigation("FeedbackSubmissions");

                    b.Navigation("PublishedPracticeCertificates");
                });

            modelBuilder.Entity("Gameboard.Api.Data.ExternalGameHost", b =>
                {
                    b.Navigation("UsedByGames");
                });

            modelBuilder.Entity("Gameboard.Api.Data.FeedbackTemplate", b =>
                {
                    b.Navigation("Submissions");

                    b.Navigation("UseAsFeedbackTemplateForGameChallenges");

                    b.Navigation("UseAsFeedbackTemplateForGames");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Game", b =>
                {
                    b.Navigation("AdvancedPlayers");

                    b.Navigation("Challenges");

                    b.Navigation("DenormalizedTeamScores");

                    b.Navigation("ExternalGameTeams");

                    b.Navigation("Feedback");

                    b.Navigation("FeedbackSubmissions");

                    b.Navigation("Players");

                    b.Navigation("Prerequisites");

                    b.Navigation("PublishedCompetitiveCertificates");

                    b.Navigation("Specs");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Player", b =>
                {
                    b.Navigation("AdvancedToPlayers");

                    b.Navigation("Challenges");

                    b.Navigation("Feedback");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Sponsor", b =>
                {
                    b.Navigation("ChildSponsors");

                    b.Navigation("SponsoredPlayers");

                    b.Navigation("SponsoredUsers");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SupportSettings", b =>
                {
                    b.Navigation("AutoTags");
                });

            modelBuilder.Entity("Gameboard.Api.Data.SystemNotification", b =>
                {
                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("Gameboard.Api.Data.Ticket", b =>
                {
                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Gameboard.Api.Data.User", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("CreatedCertificateTemplates");

                    b.Navigation("CreatedFeedbackTemplates");

                    b.Navigation("CreatedSystemNotifications");

                    b.Navigation("Enrollments");

                    b.Navigation("EnteredManualBonuses");

                    b.Navigation("Feedback");

                    b.Navigation("FeedbackSubmissions");

                    b.Navigation("GameExportBatches");

                    b.Navigation("PublishedCompetitiveCertificates");

                    b.Navigation("PublishedPracticeCertificates");

                    b.Navigation("SystemNotificationInteractions");

                    b.Navigation("UpdatedPracticeModeSettings");

                    b.Navigation("UpdatedSupportSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
