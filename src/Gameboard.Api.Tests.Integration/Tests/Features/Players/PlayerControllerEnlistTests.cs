// Copyright 2025 Carnegie Mellon University. All Rights Reserved.
// Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.

using Gameboard.Api.Data;

namespace Gameboard.Api.Tests.Integration;

public class PlayerControllerEnlistTests(GameboardTestContext testContext) : IClassFixture<GameboardTestContext>
{
    private readonly GameboardTestContext _testContext = testContext;

    [Theory, GbIntegrationAutoData]
    public async Task Enlist_WithValidConfig_AddsToTeam
    (
        string gameId,
        string code,
        string joiningPlayerId,
        string joiningUserId,
        string teamId,
        IFixture fixture
    )
    {
        // given two players in the same game but on individual teams
        await _testContext.WithDataState(state =>
        {
            var game = state.Add<Data.Game>(fixture, g =>
            {
                g.Id = gameId;
                g.MaxTeamSize = 2;
                g.Players =
                [
                    // the person doing the inviting
                    state.Build<Data.Player>(fixture, p =>
                    {
                        p.Game = state.Build<Data.Game>(fixture, g => g.Id = gameId);
                        p.InviteCode = code;
                        p.Role = PlayerRole.Manager;
                        p.TeamId = teamId;
                    }),
                    // the person joining (on another team implicitly)
                    state.Build<Data.Player>(fixture, p =>
                    {
                        p.Id = joiningPlayerId;
                        p.Game = new Data.Game { Id = gameId };
                        p.User = state.Build<Data.User>(fixture, u => u.Id = joiningUserId);
                    })
                ];
            });
        });

        // when the second player redeems the code generated by the first...
        var result = await _testContext
            .CreateHttpClientWithActingUser(u => u.Id = joiningUserId)
            .PostAsync("api/player/enlist", new PlayerEnlistment
            {
                Code = code,
                PlayerId = joiningPlayerId,
                UserId = joiningUserId
            }.ToJsonBody())
            .DeserializeResponseAs<Player>();

        // the returned player should have the same teamId was the one held by the captain
        result.TeamId.ShouldBe(teamId);
    }
}
