<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gameboard.Api</name>
    </assembly>
    <members>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddApiKeys">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddApiKeys.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddApiKeys.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddApiKeys.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.PracticeMode">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.PracticeMode.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.PracticeMode.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.PracticeMode.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.Cleanup">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.Cleanup.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.Cleanup.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.Cleanup.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.SpecText">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.SpecText.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.SpecText.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.SpecText.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddManualChallengeBonuses">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddManualChallengeBonuses.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddManualChallengeBonuses.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddManualChallengeBonuses.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.CleanupSnapshot">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.CleanupSnapshot.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.CleanupSnapshot.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.CleanupSnapshot.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.RemoveApiKeyOwnerId">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.RemoveApiKeyOwnerId.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.RemoveApiKeyOwnerId.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.RemoveApiKeyOwnerId.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddGameSyncStart">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddGameSyncStart.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddGameSyncStart.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddGameSyncStart.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddPlayerIsReady">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddPlayerIsReady.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddPlayerIsReady.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.PostgreSQL.GameboardDb.AddPlayerIsReady.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddApiKeys">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddApiKeys.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddApiKeys.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddApiKeys.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.Cleanup">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.Cleanup.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.Cleanup.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.Cleanup.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.SpecText">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.SpecText.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.SpecText.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.SpecText.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddManualChallengeBonuses">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddManualChallengeBonuses.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddManualChallengeBonuses.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddManualChallengeBonuses.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.RemoveApiKeyOwnerId">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.RemoveApiKeyOwnerId.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.RemoveApiKeyOwnerId.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.RemoveApiKeyOwnerId.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddGameSyncStart">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddGameSyncStart.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddGameSyncStart.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddGameSyncStart.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddPlayerIsReady">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddPlayerIsReady.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddPlayerIsReady.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Data.Migrations.SqlServer.GameboardDb.AddPlayerIsReady.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Gameboard.Api.Features.Version.VersionController.Version">
            <summary>
            check version
            </summary>
            <returns>The commit SHA of the current application version.</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Create(Gameboard.Api.NewChallenge)">
            <summary>
            Create new challenge instance
            </summary>
            <remarks>Idempotent method to retrieve or create challenge state</remarks>
            <param name="model">NewChallenge</param>
            <returns>Challenge</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Retrieve(System.String)">
            <summary>
            Retrieve challenge
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Preview(Gameboard.Api.NewChallenge)">
            <summary>
            Retrieve challenge preview
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Update(Gameboard.Api.ChangedChallenge)">
            <summary>
            Change challenge
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Delete(System.String)">
            <summary>
            Delete challenge
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.StartGamespace(Gameboard.Api.ChangedChallenge)">
            <summary>
            Start a  challenge gamespace
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.StopGamespace(Gameboard.Api.ChangedChallenge)">
            <summary>
            Stop a challenge gamespace
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Grade(Gameboard.Api.Features.GameEngine.GameEngineSectionSubmission)">
            <summary>
            Grade a challenge
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Regrade(Gameboard.Api.Entity)">
            <summary>
            ReGrade a challenge
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.Audit(System.String)">
            <summary>
            ReGrade a challenge
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.GetConsole(Gameboard.Api.ConsoleRequest)">
            <summary>
            Console action (ticket, reset)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.SetConsoleActor(Gameboard.Api.ConsoleRequest)">
            <summary>
            Console action (ticket, reset)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.List(Gameboard.Api.SearchFilter)">
            <summary>
            Find challenges
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.ListByUser(Gameboard.Api.ChallengeSearchFilter)">
            <summary>
            Find challenges by user
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeController.ListArchived(Gameboard.Api.SearchFilter)">
            <summary>
            Find archived challenges
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeGateController.Create(Gameboard.Api.NewChallengeGate)">
            <summary>
            Create new challenge gate
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeGateController.Retrieve(System.String)">
            <summary>
            Retrieve challenge gate
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeGateController.Update(Gameboard.Api.ChangedChallengeGate)">
            <summary>
            Change challenge gate
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeGateController.Delete(System.String)">
            <summary>
            Delete challenge gate
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeGateController.List(System.String)">
            <summary>
            Retrieve challenge gates
            </summary>
            <param name="g">game id</param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeSpecController.Create(Gameboard.Api.NewChallengeSpec)">
            <summary>
            Create a new challengespec.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeSpecController.Retrieve(System.String)">
            <summary>
            Retrieve challengespec
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeSpecController.Update(Gameboard.Api.ChangedChallengeSpec)">
            <summary>
            Change challengespec
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeSpecController.Delete(System.String)">
            <summary>
            Delete challengespec
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeSpecController.List(Gameboard.Api.SearchFilter)">
            <summary>
            Find challengespecs
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeSpecController.Sync(System.String)">
            <summary>
            Sync challengespec name/description with external source
            </summary>
            <param name="id">game id</param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ChallengeSpecController.Browse(Gameboard.Api.SearchFilter)">
            <summary>
            Find challengespecs
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.FeedbackController.Retrieve(Gameboard.Api.FeedbackSearchParams)">
            <summary>
            Gets feedback response
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.FeedbackController.Submit(Gameboard.Api.FeedbackSubmission)">
            <summary>
            Saves feedback response
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.FeedbackController.List(Gameboard.Api.FeedbackSearchParams)">
            <summary>
            Lists feedback based on search params
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.GameController.Create(Gameboard.Api.NewGame)">
            <summary>
            Create new game
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.GameController.Retrieve(System.String)">
            <summary>
            Retrieve game
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.GameController.Update(Gameboard.Api.ChangedGame)">
            <summary>
            Change game
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.GameController.Delete(System.String)">
            <summary>
            Delete game
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.GameController.List(Gameboard.Api.GameSearchFilter)">
            <summary>
            Find games
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.GameController.ListGrouped(Gameboard.Api.GameSearchFilter)">
            <summary>
            List games grouped by year and month
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.GameController.Rerank(System.String)">
            <summary>
            Rerank a game's players
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.Enroll(Gameboard.Api.NewPlayer)">
            <summary>
            Enrolls a user in a game.
            </summary>
            <param name="model"></param>
            <returns>A player record which represents an instance of the user playing a given game.</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.Retrieve(System.String)">
            <summary>
            Retrieve player
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.Update(Gameboard.Api.ChangedPlayer)">
            <summary>
            Change player
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.UpdateSession(Gameboard.Api.SessionChangeRequest)">
            <summary>
            Change player session
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.Start(System.String)">
            <summary>
            Start player/team session
            </summary>
            <param name="playerId"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.Unenroll(System.String,System.Boolean)">
            <summary>
            Delete a player enrollment
            </summary>
            <param name="playerId"></param>
            <param name="asAdmin"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.List(Gameboard.Api.PlayerDataFilter)">
            <summary>
            Find players
            </summary>
            <remarks>
            Filter with query params `gid, tid, uid, org` (group, team, user, sponsor ids)
            Filter with query param `filter=collapse` to pull just one player record per team.
            </remarks>
            <param name="model">PlayerDataFilter</param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.Scores(Gameboard.Api.PlayerDataFilter)">
            <summary>
            Show scoreboard
            </summary>
            <remarks>Include querystring value `gid` for game id</remarks>
            <param name="model">PlayerDataFilter</param>
            <returns>Standings</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.GetTeamChallenges(System.String)">
            <summary>
            Load active challenge data for a team.
            </summary>
            <param name="id">The id of the team who owns the challenges</param>
            <returns>An array of challenge entries.</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.GetTeams(System.String)">
            <summary>
            Get a Game's TeamSummary
            </summary>
            <param name="id">Game Id</param>
            <returns>TeamSummary[]</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.ObserveTeams(System.String)">
            <summary>
            Get a Game's Teams with Members
            </summary>
            <param name="id">Game Id</param>
            <returns>Team[]</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.GetBoard(System.String)">
            <summary>
            Get Player Team
            </summary>
            <param name="id">player id</param>
            <returns>Team</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.AdvanceTeams(Gameboard.Api.TeamAdvancement)">
            <summary>
            Advance an enrollment to a different game
            </summary>
            <param name="model">TeamAdvancement</param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.Enlist(Gameboard.Api.PlayerEnlistment)">
            <summary>
            Enlists the user into a player team
            </summary>
            <param name="model">EnlistingPlayer</param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.GetCertificate(System.String)">
            <summary>
            Get Player Certificate
            </summary>
            <param name="id">player id</param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.PlayerController.GetCertificates">
            <summary>
            Get List of Player Certificates
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportUserStats">
            <summary>
            Export user stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportPlayerStats">
            <summary>
            Export player stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.GetChallengeDetails(System.String)">
            <summary>
            Retrieve challenge details by Spec Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportChallengeStats(System.String)">
            <summary>
            Export challenge stats to CSV
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportChallengeDetails(System.String)">
            <summary>
            Export challenge details to CSV
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportFeedbackDetails(Gameboard.Api.FeedbackSearchParams)">
            <summary>
            Export feedback response details to CSV
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportFeedbackStats(Gameboard.Api.FeedbackSearchParams)">
            <summary>
            Export feedback stats to CSV
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportTicketDetails(Gameboard.Api.TicketReportFilter)">
            <summary>
            Export ticket details to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportTicketDayStats(Gameboard.Api.TicketReportFilter)">
            <summary>
            Export ticket day stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportTicketLabelStats(Gameboard.Api.TicketReportFilter)">
            <summary>
            Export ticket label stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportTicketChallengeStats(Gameboard.Api.TicketReportFilter)">
            <summary>
            Export ticket label stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportSeriesStats">
            <summary>
            Export series stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportTrackStats">
            <summary>
            Export track stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportSeasonStats">
            <summary>
            Export season stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportDivisionStats">
            <summary>
            Export division stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportModeStats">
            <summary>
            Export mode stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.ReportController.ExportCorrelationStats">
            <summary>
            Export correlation stats to CSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.SponsorController.Create(Gameboard.Api.NewSponsor)">
            <summary>
            Create new sponsor
            </summary>
            <param name="model"></param>
            <returns>Sponsor</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.SponsorController.Retrieve(System.String)">
            <summary>
            Retrieve sponsor
            </summary>
            <param name="id"></param>
            <returns>Sponsor</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.SponsorController.Update(Gameboard.Api.ChangedSponsor)">
            <summary>
            Change sponsor
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.SponsorController.Delete(System.String)">
            <summary>
            Delete sponsor
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.SponsorController.List(Gameboard.Api.SearchFilter)">
            <summary>
            Find sponsors
            </summary>
            <param name="model">DataFilter</param>
            <returns>Sponsor[]</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.TicketController.Retrieve(System.Int32)">
            <summary>
            Gets ticket details
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.TicketController.Create(Gameboard.Api.NewTicket)">
            <summary>
            Create new ticket
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.TicketController.Update(Gameboard.Api.ChangedTicket)">
            <summary>
            Update ticket
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.TicketController.List(Gameboard.Api.TicketSearchFilter)">
            <summary>
            Lists tickets based on search params
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.TicketController.AddComment(Gameboard.Api.NewTicketComment)">
            <summary>
            Create new ticket comment
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.TicketController.ListLabels(Gameboard.Api.SearchFilter)">
            <summary>
            Lists all distinct labels
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UnityGameController.CreateChallenge(Gameboard.Api.Features.UnityGames.NewUnityChallenge)">
            <summary>
                Create challenge data for an existing Unity game's gamespace.
            </summary>
            <param name="model">NewChallengeEvent</param>
            <returns>ChallengeEvent</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.Create(Gameboard.Api.NewUser)">
            <summary>
            Register a new user
            </summary>
            <param name="model">NewUser</param>
            <remarks>Must be admin or self. Idempotent, so can be used as registration endpoint for ui initializer.</remarks>
            <returns>User</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.Retrieve(System.String)">
            <summary>
            Retrieve user
            </summary>
            <param name="id"></param>
            <returns>User</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.Update(Gameboard.Api.ChangedUser)">
            <summary>
            Change user
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.Delete(System.String)">
            <summary>
            Delete user
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.List(Gameboard.Api.UserSearch)">
            <summary>
            Find users
            </summary>
            <param name="model"></param>
            <returns>User[]</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.ListSupport(Gameboard.Api.SearchFilter)">
            <summary>
            Find users with SUPPORT role
            </summary>
            <param name="model"></param>
            <returns>User[]</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.GetTicket">
            <summary>
            Retrieve one-time-ticket to authenticate a signalr connection
            </summary>
            <remarks>Expires in 20s</remarks>
            <returns>{ "ticket": "value"}</returns>
        </member>
        <member name="M:Gameboard.Api.Controllers.UserController.Heartbeat">
            <summary>
            Auth check fails if cookie expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers._Controller.Validate(System.Object)">
            <summary>
            Validate a model against all validators registered
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Controllers._Controller.AuthorizeAll(System.Func{System.Boolean}[])">
            <summary>
            Authorize if all requirements are met
            </summary>
            <param name="requirements"></param>
        </member>
        <member name="M:Gameboard.Api.Controllers._Controller.AuthorizeAny(System.Func{System.Boolean}[])">
            <summary>
            Authorized if any requirement is met
            </summary>
            <param name="requirements"></param>
        </member>
        <member name="M:Gameboard.Api.Services.PlayerService.MapId(System.String)">
            <summary>
            Maps a PlayerId to its UserId
            </summary>
            <remarks>This happens frequently for authorization, so cache the mapping.</remarks>
            <param name="playerId"></param>
            <returns></returns>
        </member>
        <member name="M:Gameboard.Api.Services.UserService.Create(Gameboard.Api.NewUser)">
            <summary>
            If user exists update fields
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Gameboard.Api.Services.StartupLogger">
            <summary>
            After the app has been built, we can use the traditional logging infrastructure built into .NET core. However, during startup,
            this stack is not available, so we log here instead.
            </summary>
        </member>
        <member name="P:Gameboard.Api.LoggingSettings.RequestBodyLogLimit">
            <summary>
            The maximum number of bytes logged for the request body (in bytes).
            </summary>
        </member>
        <member name="P:Gameboard.Api.LoggingSettings.ResponseBodyLogLimit">
            <summary>
            The maximum number of bytes logged for the response body (in bytes).
            </summary>
        </member>
        <member name="T:IInternalHubBus">
            <summary>
            This is separate from AppHub because it encapsulates hub management functionality that we want to be available server side
            but not client side - every public method on AppHub is available to clients.
            </summary>
        </member>
    </members>
</doc>
